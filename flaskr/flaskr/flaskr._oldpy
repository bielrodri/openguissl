# coding: utf-8
import os
import sqlite3
import subprocess
from flask import Flask, request, session, g, redirect, url_for, abort, \
    render_template, flash, json, make_response

from werkzeug.utils import secure_filename
from flask import send_from_directory
import sys
if sys.version_info.major < 3:
    reload(sys)
sys.setdefaultencoding('utf8')

ALLOWED_EXTENSIONS = set(['txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'])

app = Flask(__name__)  # create the application instance :)
app.config.from_object(__name__)  # load config from this file , flaskr.py

UPLOAD_FOLDER = os.path.join(app.root_path, 'uploads_SI_openguissl')
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024

# Load default config and override config from an environment variable
app.config.update(dict(
    DATABASE=os.path.join(app.root_path, 'flaskr.db'),
    SECRET_KEY='development key',
    USERNAME='admin',
    PASSWORD='default'
))
app.config.from_envvar('FLASKR_SETTINGS', silent=True)

# from werkzeug import SharedDataMiddleware
# app.add_url_rule('/uploads/<filename>', 'uploaded_file',
#                  build_only=True)
# app.wsgi_app = SharedDataMiddleware(app.wsgi_app, {
#     '/uploads':  app.config['UPLOAD_FOLDER']
# })
def get_ciphernames():
    ciphernames = []
    ciphernames.append({'name': 'aes256', 'value': '-aes256'})
    ciphernames.append({'name': 'des-ecb', 'value': '-des-ecb'})
    return ciphernames

@app.route('/')
def show_entries():
    return render_template('show_entries.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    error = None
    if request.method == 'POST':
        if request.form['username'] != app.config['USERNAME']:
            error = 'Invalid username'
        elif request.form['password'] != app.config['PASSWORD']:
            error = 'Invalid password'
        else:
            session['logged_in'] = True
            flash('You were logged in')
            return redirect(url_for('show_entries'))
    return render_template('login.html', error=error)


@app.route('/logout')
def logout():
    session.pop('logged_in', None)
    flash('You were logged out')
    return redirect(url_for('show_entries'))


def genKey(keyType, numBytes):
    cmd = "openssl rand " + keyType + " " + numBytes
    key = run_command(cmd)
    return key


@app.route('/gerarChaves', methods=['GET', 'POST'])
def gerarChaves():
    keyType = request.form.get('keyType', None)
    numBytes = request.form.get('numBytes', None)
    if not keyType or not numBytes:
        flash("escolha o tipo do output e quantidade de bytes")
        return render_template("genRandKey.html", keyType=keyType, numBytes=numBytes)
    key = genKey(keyType=keyType, numBytes=numBytes)
    return render_template("genRandKey.html", key=key, keyType=keyType, numBytes=numBytes)


def run_command(cmd):
    '''
        cmd     A string of commands separated by spaces 
    '''
    p = subprocess.Popen(
        cmd.split(" "), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    
    out, err = p.communicate()

    if err:
        raise RuntimeError(err)
    
    return out


def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


def transform(text_file_contents):
    # return text_file_contents.replace("=", ",")
    return text_file_contents.replace("PByFcYAZFkvZxzDZvynQwBaXtEbDtPB71KZWpccmBLHgC6U2ag8n71uinuhpmMN8wUEcCFqDZ5ixu7d3S4ZPHQW62E6mSncJiN", "Mudou")


@app.route('/cifrarFicheiro', methods=['GET', 'POST'])
def cifrarFicheiro(ciphernames=get_ciphernames()):
    if request.method == 'POST':

        key = request.form.get('key', None)

        # check if the post request has the file part
        if 'file' not in request.files:
            flash('No file part')
            return render_template("cipherFile.html", ciphernames=ciphernames, key=key)
        
        fileIn = request.files['file']
        
        if not key:
            flash('Chave inválida')
            return render_template("cipherFile.html", ciphernames=ciphernames, file=fileIn.filename, key=key)

        if fileIn.filename == '':
            flash('Ficheiro não selecionado')
            return render_template("cipherFile.html", ciphernames=ciphernames, file=fileIn.filename, key=key)

        if fileIn and allowed_file(fileIn.filename):
            filename = secure_filename(fileIn.filename)
            filePath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            fileIn.save(filePath)

            file_contents = fileIn.stream.read().decode("utf-8")

            result = transform(file_contents)

            response = make_response(result)
            response.headers["Content-Disposition"] = "attachment; filename=result.csv"
            return response

    return render_template("cipherFile.html", ciphernames=ciphernames)


@app.route('/uploads/<filename>')
def uploaded_file(filename):
    uploads = os.path.join(app.root_path, app.config['UPLOAD_FOLDER'])
    return send_from_directory(directory=uploads, filename=filename)


@app.route('/calculateHash')
def calcHash():
    pass


@app.route('/calculateHMAC')
def calcHMAC():
    pass


@app.route('/genRSAkeys')
def genRSAkeys():
    pass


@app.route('/signFile')
def signFile():
    pass



